part of cobblestone;

/// A generic batch, used as a base for others like [SpriteBatch].
abstract class VertexBatch {
  /// Reference to the game's [GLWrapper]
  GLWrapper wrapper;
  GL.RenderingContext _context;

  /// The maximum number of things to be drawn in this batch.
  ///
  /// Exceeding this number will force a flush, and possibly resize the batch.
  int maxSprites = 8000;

  /// The number of properties in each vertex (x, y, z, color, etc.)
  int vertexSize = 3;
  /// The number of vertices used in each sprite.
  int verticesPerSprite = 1;
  /// The number of indices used in each sprite.
  int indicesPerSprite = 1;

  /// The WebGL draw mode used by this batch, e.g. POINTS, TRIANGLES, LINES.
  int drawMode = WebGL.POINTS;

  /// The number of sprites that have been drawn to the batch since start or last flush.
  int spritesInFlush = 0;
  /// The number of sprites rendered before [end] was called. Used to help resize batch.
  int spritesToEnd = 0;
  /// The next data index to be used in the vertex buffer.
  int index = 0;

  /// Raw vertex data generated by draw calls on this batch.
  ///
  /// Sent to the GPU during [flush].
  Float32List vertices;
  /// Raw index data generated by draw calls on this batch.
  ///
  /// Sent to the GPU during [flush].
  Int16List indices;

  /// Reference to the actual WebGL vertex buffer.
  GL.Buffer vertexBuffer;
  /// Reference to the actual WebGL index buffer.
  GL.Buffer indexBuffer;

  /// The shader program used by this batch.
  ShaderProgram shaderProgram;

  /// The projection matrix used by this batch.
  ///
  /// Sent to the GPU as a uniform.
  Matrix4 projection;

  /// Called during rendering, use [setUniform] to provide additional data to shaders here.
  Function setAdditionalUniforms = () {};

  /// Creates a new vertex batch with empty buffers.
  VertexBatch(this.wrapper, this.shaderProgram, {this.maxSprites = 8000}) {
    _context = wrapper.context;
    
    projection = Matrix4.identity();

    vertexBuffer = _context.createBuffer();
    indexBuffer = _context.createBuffer();

    rebuildBuffer();

    reset();
  }

  /// Allocates new typed lists for the vertex and index data.
  rebuildBuffer() {
    vertices = Float32List(maxSprites * vertexSize * verticesPerSprite);
    indices = Int16List(maxSprites * indicesPerSprite);
    createIndices();
  }

  /// Sets the [index] and [spritesInFlush] to zero to prepare for a new flush.
  reset() {
    index = 0;
    spritesInFlush = 0;
  }

  /// Starts the shader, sets uniforms, and prepares for drawing.
  begin() {
    shaderProgram.startProgram();

    setAdditionalUniforms();
  }

  /// Appends a double value to the vertex buffer, and increments [index].
  ///
  /// Typically used within draw methods in subclasses.
  appendAttrib(double value) {
    vertices[index] = value;
    index++;
  }

  /// Creates sequential indices to fill the index buffer.
  ///
  /// Should be overridden for batches that reuse vertices.
  createIndices() {
    for (int i = 0; i < indices.length; i++) {
      indices[i] = i;
    }

    _context.bindBuffer(WebGL.ELEMENT_ARRAY_BUFFER, indexBuffer);
    _context.bufferData(WebGL.ELEMENT_ARRAY_BUFFER, indices, WebGL.STATIC_DRAW);
  }

  /// Draws the batch to the screen, and prepares for new drawing data.
  flush() {
    _context.bindBuffer(WebGL.ARRAY_BUFFER, vertexBuffer);
    _context.bufferData(WebGL.ARRAY_BUFFER, vertices, WebGL.DYNAMIC_DRAW);
    _context.bindBuffer(WebGL.ELEMENT_ARRAY_BUFFER, indexBuffer);

    setAttribPointers();

    _context.uniformMatrix4fv(
        shaderProgram.uniforms[projMatUni], false, projection.storage);

    // The indices are important!
    _context.drawElements(
        drawMode, spritesInFlush * indicesPerSprite, WebGL.UNSIGNED_SHORT, 0);

    spritesToEnd += spritesInFlush;
    reset();
  }

  /// Sets a uniform for the batch shader.
  ///
  /// See [ShaderProgram.setUniform].
  void setUniform(String name, dynamic value) =>
      shaderProgram.setUniform(name, value);

  /// Sets WebGL pointers to shader vertex attributes.
  void setAttribPointers();

  /// Finishes the batch, calling [flush] and ending the shader program.
  end() {
    flush();
    if (spritesToEnd > maxSprites) {
      maxSprites = spritesToEnd;
      print("Resized: " + maxSprites.toString());
      rebuildBuffer();
    }
    spritesToEnd = 0;
    shaderProgram.endProgram();
  }
}
